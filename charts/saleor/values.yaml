# Default values for saleor-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  # image name overrides repository and tag.
  imageName: ""
  repository: saadhaddad
  pullPolicy: IfNotPresent
  tag: "3.0.0"

# fullnameOverride: saleor-api

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  annotations:
    cert-manager.io/acme-challenge-type: http01
    cert-manager.io/cluster-issuer: letsencrypt-prod

  hosts:
    - host: chart-example.local
      paths: 
        - '/graphql/'
  tls:
    - secretName: ""
      hosts:
        - chart-example.local
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

saleor:
  enableHpa: true
  maxReplicas: 3
  minReplicas: 2
  resources:
    requests:
      cpu: 300m
      memory: 600Mi
  

celeryrunner:
  enabled: true
  fullname: celery-worker
  resources:
    requests:
      cpu: 100m
      memory: 400Mi


nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        topologyKey: kubernetes.io/hostname

# Settings concerning the redis server goes here:
redis:
  cluster:
    enabled: false
  master:
    resources:
      requests:
        cpu: 30m
        memory: 70Mi
      limits:
        cpu: 80m
        memory: 80Mi
    persistence:
      enabled: false    

# enable the cronjob to create the Google Merchant Productfeed. Works only when S3 storage is active!
productfeedJob:
  enabled: false

# enable the cronjob to create DB backups to S3. You can specify how many DB dumps should be kept.
postgresBackup:
  enabled: false
  historyLimit: 5
  schedule: 0 */8 * * *
  bucketName: postgres-backup


# Settings concerning the postgresql server goes here:
postgresql:
  enabled: true
  metrics:
    enabled: false  
  persistence:
    enabled: true
    size: 10Gi
  replication:
    enabled: false
  resources:
    limits:
      memory: 300Mi 
    requests:
      cpu: 200m
      memory: 200Mi   
 
# global settings both for saleor and postgresql. Set the password to something safe ;) 
global:
  # you can have the database URL for an external database if you don't want to setup one by yourself
  DATABASE_URL:
  # postgresql://user:password@hostname:533/saleor
  # If postgresql.enabled = true
  postgresql:
    postgresqlDatabase: saleor
    postgresqlUsername: saleor
    postgresqlPassword: privacy-disarray-mop0
    postgresqlPort: "5432"
  redis:
    password: w6736iu-1346726hz12-578-2h228u3576jh24658-456h
  emailUrl: smtp://test@triebwork.com:XXXXXXXX@smtp.mailgun.org:465/?ssl=True
  secretKey: sefb68-2133r-24577v-tgnqetb-qe5zb
  AWS_S3_ENDPOINT_URL: https://s3.example.com/
  AWS_S3_CUSTOM_DOMAIN: https://s3.example.com/
  AWS_ACCESS_KEY_ID: 123456fetrg
  AWS_STORAGE_BUCKET_NAME: static
  AWS_MEDIA_BUCKET_NAME: static
  AWS_MEDIA_CUSTOM_DOMAIN: https://s3.example.com/
  AWS_SECRET_ACCESS_KEY: 1234567689q
  # this enables querystring authentication. Very useful for private buckets.
  AWS_QUERYSTRING_AUTH: "True"
  # this tells django how long the item is accessible with querystring auth. Setting this to five days
  AWS_QUERYSTRING_EXPIRE: "432000"
  SENTRY_DSN: ""
  env: 
    - name: DEFAULT_CURRENCY
      value: EUR
    - name: DEFAULT_COUNTRY
      value: DE
    - name: DEBUG
      value: "False" 
  allowedHosts: test-api.example.com
  # maximum number of checkout line items. Normal value is 50
  maxCheckoutLine: "100"
  jwtTTLrefresh: "365 days"
  jwtTTLaccess: "3 days"
  # set the Private Key to sign the JWTs
  rsaPrivateKey: |
    -----BEGIN RSA PRIVATE KEY-----
    MIICXQIBAAKBgQC02GmEeYpXguBCnDgxGoMocW6soFiGJP3cnYbu7YT3LWtkDz9x
    KhzKlg/IHAXhAnzQhbWCI/W9DnsoL5qiu3eA8c4PVO43DMGPqpHC/zU5crp9tIUB
    kTBFyAABOwocZObP5dkgQQ4mrDBbHp81o+8uDjstRu9kMMDDdj2/gkOG8QIDAQAB
    AoGBAK5oV7rvDEBBc85JoteYXg1O+BF7wmP8oOd29H7Qin9nSj6Bhgm5N3MZLbcr
    b3AFWiIwEVClJYVixduHrXZrnV8W8gqHWaAJONJ0bIgBUhpDDTvYOdc4ngbLZ/fM
    BOk5L9WNBdgng7TPS3IX5UgndKjziicWpZEdGgKgSBjy23lRAkEA9pnBFaPrvQNC
    iL0N+F1+5TQx1I8onylZwYYdVNYzry+qjTf3CfSi2ThbEuKjYHzlyNSP4RJV3b2i
    oexjS+MfIwJBALu9CldRAQxoC7i8XuiBQ1I+zblYZ0gqV0HcExgiCKJubCSwoPBZ
    JzRB/KFHbysC4QztD3xVE+MDxwPf2PO4zNsCQHX8QoGUGCoq8R5zNcfrE9eeDWlh
    xVHBeww4mrgIdFoROEywxiWhQnkjmY+DmB+GInrgGKbbGvIo1TMb4rZgSHkCQDtX
    LmyZCxbL0GCtEea17PyTI12hZsv1ri0ADf0DzOzisEYMmmI+G9k1vk+QD8BtoYr/
    Z3SqQ6Xu7Ln5yE6JLB8CQQDisLHsh0CV6IWjrZj2hmzPg99kJJLJjodnCdALdmp8
    jfOx3c+dMTudxkzuXQGXPYuHqYbUmHZq75Vd2zIY19kC
    -----END RSA PRIVATE KEY-----



# settings for the image pull secret if needed
imageCredentials:
  enabled: false
  registry: registry.gitlab.com
  username: someone
  password: sillyness
# set to "generated" if you enable the imageCredentials creation
imagePullSecrets:
  - name: github
#  - name: generated